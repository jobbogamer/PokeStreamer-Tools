$imageWrapperRatio: strip-unit($imageWrapperWidth) / strip-unit($imageWrapperHeight);
$hShift: $imageShift * $imageWrapperRatio;
$vShift: $imageShift / $imageWrapperRatio;

@mixin img-trans($transforms) {
  > img, 
  > .death-wrapper, 
  > .void-wrapper {
    transform: $transforms;
  }
}

@mixin flip-img($transforms) {
  @include img-trans(scale(-1, 1) $transforms);
}

@mixin overlay($v, $h) {
  .img-overlay {
    position: absolute;
    display: block;
    opacity: 1;
    transition: opacity 1s;
    
    @if $h {
      @if $h == left {
        left: 0;
      } @else if $h == right {
        right: 0;
      } @else {
        @warn "Invalid overlay horizontal value `#{$h}`";
      }
    } @else {
      // center horizontally
      left: 50%;
      transform: translate(-50%, 0);
    }
    
    @if $v {
      @if $v == top {
        top: 0;
      } @else if $v == bottom {
        bottom: 0;
      } @else {
        @warn "Invalid overlay vertical value `#{$v}`";
      }
    } @else {
      // vertically center
      top: 50%;
      transform: translate(0, -50%);
    }
  }
}

%sl-diagonal-forward {
  &:first-child {
    @include overlay(top, left);
    @include img-trans(translate(-$hShift, -$vShift) $imageScale);
  }
  
  &:last-child {
    @include overlay(bottom, right);
    @include flip-img(translate(-$hShift, $vShift) $imageScale);
  }
}

%sl-diagonal-backward {
  &:first-child {
    @include overlay(top, right);
    @include flip-img(translate(-$hShift, -$vShift) $imageScale);
  }
  
  &:last-child {
    @include overlay(bottom, left);
    @include img-trans(translate(-$hShift, $vShift) $imageScale);
  }
}

%sl-horizontal {
  &:first-child {
    .img-overlay {
      position: absolute;
      right: 0;
      top: 25%;
      transform: translate(0, -50%);
    }
    
    @include img-trans(translate(-$hShift, -$vShift) $imageScale);
  }
  
  &:last-child {
    .img-overlay {
      position: absolute;
      left: 0;
      top: 75%;
      transform: translate(0, -50%);
    }
    
    @include flip-img(translate(-$hShift, $vShift) translate(0, 25%) $imageScale);
  }
}

%sl-vertical {
  &:first-child {
    .img-overlay {
      position: absolute;
      left: 25%;
      transform: translate(-50%, 0);
      bottom: 0;
    }
    
    // @include img-trans(translate(-$hShift, -$vShift) translate(-$soulLinkGap, 0) $imageScale);
  }
  
  &:last-child {
    .img-overlay {
      position: absolute;
      left: 75%;
      transform: translate(-50%, 0);
      top: 0;
    }
    
    top: -$imageWrapperHeight !important;
    @include flip-img(translate($hShift, $vShift) translate(-25%, 0) $imageScale);
  }
}

%thumbnail-base {
  .image-wrapper {
    &:last-child {
      transform: scale(.5 .5);
      transform-origin: 100% 100%;
      
      @include overlay(bottom, left);
    }
  }
}

@mixin soul-link-styles($direction) {
  .img-wrapper {
    position: relative;
    
    @extend %sl-#{$direction} !optional;
    
    &:first-child {
      clip-path: url(#soulLinkClipTop);
    }
    
    &:last-child {
      clip-path: url(#soulLinkClipBottom);
      top: -$imageWrapperHeight;
    }
  }
}

@if $soulLinkEnabled {
  svg {
    position: absolute;
  }
  
  .soul-link {
    @if $soulLinkOrientation != "custom" and $soulLinkOrientation != "thumbnail" {
      @include soul-link-styles($soulLinkOrientation);
    } @else if $soulLinkOrientation == "thumbnail" {
      @extend %thumbnail-base;
      @extend %thumbnail !optional;
    }
  }
  
  .img-wrapper {
    width: $imageWrapperWidth;
    max-width: $imageWrapperWidth;
    height: $imageWrapperHeight;
    max-height: $imageWrapperHeight;
    
    &:first-child {
      transform: translate(map-get($imageWrapperShifts, "topLeft"), map-get($imageWrapperShifts, "topTop"));      
    }
    
    &:last-child {
      transform: translate(map-get($imageWrapperShifts, "bottomLeft"), map-get($imageWrapperShifts, "bottomTop"));      
    }
    
    &:not(.soul-linked) {
      &.invalid {
        @extend %invalidPokemon !optional;

        ~ .soul-linked {
          @extend %invalidPokemon !optional;

          filter: blur(30%);
        }
      }
    }
    
    &.soul-linked {
      @extend %soulLinkedWrapper !optional;
    }
  }
  
  .void-wrapper {
    > img {
      animation: 2s voidsmoke forwards;
    }

    ~ .img-overlay {
      opacity: 0 !important;
    }
  }
}